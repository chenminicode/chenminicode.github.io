{
  "hash": "d4c834d53f8c51be1581547d23e0e0cf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"《R语言入门与实践》摘要\"\nauthor: \"metseq\"\ndate: \"2024-03-11\"\ncategories: [R]\ntoc: true\nnumber-sections: false\ndraft: true\nexecute:\n  output: true\n---\n\n\n# 概述\n\n看《R for Data Science》的时候，Hadley Wickham推荐了这本书《Hands-On Programming with R》，中文译名是《R语言入门与实践》。这本书关注的是R语言作为语言的基础，基本不涉及统计，我对R语言的了解基本是调用demo代码的时候，自己感觉的，缺少对R语言作为语言的整体了解，所以这本书是我需要的。\n\n# 第1章 R基础\n\n## 1.2 对象\n\n对象，就是一个名称而已，在R中存储的数据就是一个R对象。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndie <- 1:6\ndie\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n:::\n\n\n元素方式执行（element-wise execution）\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndie - 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\ndie / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5 1.0 1.5 2.0 2.5 3.0\n```\n\n\n:::\n\n```{.r .cell-code}\ndie * die\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  4  9 16 25 36\n```\n\n\n:::\n:::\n\n\n矩阵内乘法\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndie %*% die\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]\n[1,]   91\n```\n\n\n:::\n:::\n\n\n矩阵外乘法\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndie %o% die\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    1    2    3    4    5    6\n[2,]    2    4    6    8   10   12\n[3,]    3    6    9   12   15   18\n[4,]    4    8   12   16   20   24\n[5,]    5   10   15   20   25   30\n[6,]    6   12   18   24   30   36\n```\n\n\n:::\n:::\n\n\n## 1.3 函数\n\n函数调用\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(x = die, size = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n查看函数参数\n\n\n::: {.cell}\n\n```{.r .cell-code}\nargs(sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfunction (x, size, replace = FALSE, prob = NULL) \nNULL\n```\n\n\n:::\n:::\n\n\n## 1.4 可放回抽样\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(die, size = 10, replace = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 2 3 2 3 1 5 3 6 3 5\n```\n\n\n:::\n:::\n\n\n## 1.5 编写自定义函数\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroll <- function(){\n  die <- 1:6\n  dice <- sample(die, size = 2, replace = TRUE)\n  sum(dice)\n}\n\nroll()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n\n## 1.6 函数参数\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroll2 <- function(bones = 1:6){\n  dice <- sample(bones, size = 2, replace = TRUE)\n  sum(dice)\n}\n\nroll2()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n:::\n\n\n# 第3章 R对象\n\n## 3.1 原子型向量\n\n原子型向量就是最简单的包含数据的向量。\n\n比如之前的\\`die\\`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndie <- 1:6\ndie\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n\n```{.r .cell-code}\nis.vector(die)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n至包含一个值的原子型向量\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfive <- 5\nfive\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\nis.vector(five)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n::: callout-tip\n🤔R竟然把一个整数存成了长度为1的向量，理解向量是理解R语言的关键。\n:::\n\nR可以识别6种基本类型的原子型向量：\n\n-   双整型（double）\n\n-   整型（integer）\n\n-   字符型（character）\n\n-   逻辑型（logical）\n\n-   复数类型（complex）\n\n-   原始类型（raw）\n\n### 3.1.1 双整型\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndie <- c(1, 2, 3, 4, 5, 6)\ndie\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(die)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\n### 3.1.2 整型\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfoo <- c(-1L, 2L, 4L)\nfoo\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1  2  4\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(foo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n浮点误差\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(2)^2 - 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.440892e-16\n```\n\n\n:::\n:::\n\n\n### 3.1.3 字符型\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext <- c(\"Hello\", \"World\")\ntext\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello\" \"World\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(text)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n### 3.1.4 逻辑型\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 > 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nlogic <- c(TRUE, FALSE, TRUE)\nlogic\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(logic)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n### 3.1.5 附属类型和原始类型\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomp <- c(1 + 1i, 1 + 2i, 1 + 3i)\ncomp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1+1i 1+2i 1+3i\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(comp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"complex\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nraw(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 00 00 00\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(raw(3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"raw\"\n```\n\n\n:::\n:::\n\n\n## 3.2 属性\n\n属性是附加给原始型向量的额外信息，可以将属性赋予一个原子型向量（或者任意一个R对象）。属性并不会影响这个数据的取值，在显示该对象时也不会出现属性信息。你可以把属性理解为对象的元数据（metadata）。\n\n::: callout-important\n通常来说，R会选择忽略这些元数据信息，但某些R函数会检查是否附有某些特定的属性值。这些函数会根据该数据对象的特定属性信息决定是否进行某些特定的操作。\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndie <- 1:6\nattributes(die)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n\n```{.r .cell-code}\ndie\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n:::\n\n\n::: callout-tip\nR用NULL表示空值，意即没有任何信息。这里就是没有属性的意思。\n:::\n\n可以自己生成一个`NULL`对象\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbar <- 1:4\nbar\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n\n```{.r .cell-code}\nbar <- NULL\nbar\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n\n\n原子型向量最常见的三种属性时：名称（name），维度（dim）和类（class）。\n\n### 3.2.1 名称属性\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndie <- 1:6\n\n# 查询名称属性\nnames(die)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n\n```{.r .cell-code}\n# 赋予名称属性\nnames(die) <- c(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\")\nnames(die)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"one\"   \"two\"   \"three\" \"four\"  \"five\"  \"six\"  \n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(die)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$names\n[1] \"one\"   \"two\"   \"three\" \"four\"  \"five\"  \"six\"  \n```\n\n\n:::\n\n```{.r .cell-code}\n# 删除名称属性\nnames(die) <- NULL\nnames(die)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n\n\n### 3.2.2 维度属性\n\n通过赋予原子型向量维度属性，将其转成一个n维数组\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndie\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(die) <- c(2, 3)\ndie\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n\n\n:::\n:::\n\n\n## 3.3 矩阵\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- matrix(die, nrow = 2)\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n\n\n:::\n:::\n\n\n## 3.4 数组\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 和dim效果差不多\nar <- array(1:6, dim = c(2, 3))\nar\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n\n\n:::\n:::\n\n\n## 3.5 类\n\n更改对象的维度属性不会改变其**类型**，但是会改变这个对象的**class**属性。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndie <- 1:6\ntypeof(die)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(die)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(die) <- c(2, 3)\ntypeof(die)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(die)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(die)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$dim\n[1] 2 3\n```\n\n\n:::\n:::\n\n\n### 3.5.1 日期和时间\n\nR用一个特殊的类表示日期和时间数据。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnow <- Sys.time()\nnow\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2024-03-11 22:27:05 CST\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(now)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(now)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"POSIXct\" \"POSIXt\" \n```\n\n\n:::\n\n```{.r .cell-code}\n# 值是1970年1月1日零点（UTC）开始所逝去的秒数\nunclass(now)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1710167226\n```\n\n\n:::\n:::\n\n\n### 3.5.2 因子\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngender <- factor(c(\"male\", \"female\", \"female\", \"male\"))\n\ntypeof(gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$levels\n[1] \"female\" \"male\"  \n\n$class\n[1] \"factor\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# 用整数存储因子，整数对于相应level的标签\nunclass(gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 1 1 2\nattr(,\"levels\")\n[1] \"female\" \"male\"  \n```\n\n\n:::\n:::\n\n\n## 3.6 强制转换\n\n顺序是：\n\n逻辑型 ——\\> 数值型 ——\\> 字符型\n\n也就是如果同时存在逻辑型和数值型，会转换成数值型，以此类推。\n\n## 3.7 列表\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist1 <- list(100:130, \"R\", list(TRUE, FALSE))\nlist1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n [1] 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118\n[20] 119 120 121 122 123 124 125 126 127 128 129 130\n\n[[2]]\n[1] \"R\"\n\n[[3]]\n[[3]][[1]]\n[1] TRUE\n\n[[3]][[2]]\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n## 3.8 数据框\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(\n  face = c(\"ace\", \"two\", \"six\"),\n  suit = c(\"clubs\", \"clubs\", \"clubs\"),\n  value = c(1, 2, 3)\n)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  face  suit value\n1  ace clubs     1\n2  two clubs     2\n3  six clubs     3\n```\n\n\n:::\n:::\n\n\n::: callout-tip\n创建列表或向量时，也可以命名\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(face = \"ace\", suit = \"hearts\", value = 1:6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$face\n[1] \"ace\"\n\n$suit\n[1] \"hearts\"\n\n$value\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n\n```{.r .cell-code}\nc(face = \"ace\", suit = \"hearts\", value = \"one\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    face     suit    value \n   \"ace\" \"hearts\"    \"one\" \n```\n\n\n:::\n:::\n\n\n# 第4章 R的记号体系\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}