<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Blog</title>
<link>https://chenminicode.github.io/index.html</link>
<atom:link href="https://chenminicode.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>metseq's blog</description>
<generator>quarto-1.1.251</generator>
<lastBuildDate>Fri, 30 Dec 2022 16:00:00 GMT</lastBuildDate>
<item>
  <title>Python中的几个魔法方法</title>
  <dc:creator>metseq</dc:creator>
  <link>https://chenminicode.github.io/posts/2022-11-31-python_magic_method/index.html</link>
  <description><![CDATA[ 




<section id="类和对象的__dict__属性" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> 类和对象的<code>__dict__</code>属性</h1>
<section id="对象的__dict__属性" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="对象的__dict__属性"><span class="header-section-number">1.1</span> 对象的<code>__dict__</code>属性</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">class</span> Point():</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;">'''Create a Point'''</span></span>
<span id="cb1-3">    my_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'A Point'</span></span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, x, y):</span>
<span id="cb1-5">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> x</span>
<span id="cb1-6">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> y</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">p <span class="op" style="color: #5E5E5E;">=</span> Point(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb2-2">p.__dict__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>{'x': 3, 'y': 4}</code></pre>
</div>
</div>
<p>对象的<code>__dict__</code>属性就是一个字典，这个字典的键是对象的属性，值就是对应属性的值。</p>
<p>当给对象属性复制的时候，就是修改<code>__dict__</code>字典。</p>
</section>
<section id="类的__dict__属性" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="类的__dict__属性"><span class="header-section-number">1.2</span> 类的<code>__dict__</code>属性</h2>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">Point.__dict__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>mappingproxy({'__module__': '__main__',
              '__doc__': 'Create a Point',
              'my_name': 'A Point',
              '__init__': &lt;function __main__.Point.__init__(self, x, y)&gt;,
              '__dict__': &lt;attribute '__dict__' of 'Point' objects&gt;,
              '__weakref__': &lt;attribute '__weakref__' of 'Point' objects&gt;})</code></pre>
</div>
</div>
<p>可以看到，<code>Point</code>类的<code>__dict__</code>属性包括了:</p>
<ul>
<li>类的文档<code>__doc__</code></li>
<li>类中定义变量，比如这里的<code>my_name</code></li>
<li>类的方法</li>
<li>其他一些不知道什么的东西😓</li>
</ul>
</section>
</section>
<section id="类的__repr__和__str__方法" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> 类的<code>__repr__</code>和<code>__str__</code>方法</h1>
<section id="repr__方法" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="repr__方法"><span class="header-section-number">2.1</span> <code>__repr__</code>方法</h2>
<p>直接输出<code>p</code>时，会显示一堆没用的东西</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">p</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>&lt;__main__.Point at 0x7f9c78f37cd0&gt;</code></pre>
</div>
</div>
<p>我们想显示关于<code>Point</code>的有用信息，这时<code>__repr__</code>方法就派上用场了</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">class</span> Point():</span>
<span id="cb8-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, x, y):</span>
<span id="cb8-3">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> x</span>
<span id="cb8-4">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> y</span>
<span id="cb8-5">    </span>
<span id="cb8-6">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__repr__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb8-7">        <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">"Point(x=</span><span class="sc" style="color: #5E5E5E;">%r</span><span class="st" style="color: #20794D;">, y=</span><span class="sc" style="color: #5E5E5E;">%r</span><span class="st" style="color: #20794D;">)"</span> <span class="op" style="color: #5E5E5E;">%</span> (<span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">p <span class="op" style="color: #5E5E5E;">=</span> Point(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb9-2">p</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>Point(x=3, y=4)</code></pre>
</div>
</div>
</section>
<section id="str__方法" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="str__方法"><span class="header-section-number">2.2</span> <code>__str__</code>方法</h2>
<p><code>__str__</code>方法和<code>__repr__</code>方法好像都是用字符表示对象的，有什么区别呢？</p>
<p><a href="https://stackoverflow.com/questions/1436703/what-is-the-difference-between-str-and-repr">stackoverflow</a>有一个回答说:</p>
<ul>
<li><code>__repr__</code>显示的信息需要避免歧义</li>
<li><code>__str__</code>显示的信息注重可读性，方便理解</li>
<li><code>__str__</code>使用了<code>__repr</code></li>
</ul>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;">str</span>(p)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>'Point(x=3, y=4)'</code></pre>
</div>
</div>
<p>在<code>Point</code>中如果没有重写<code>__str__</code>方法，会调用<code>__repr__</code>输出的结果</p>
<p>如果在<code>Point</code>中重写了<code>__str__</code>方法，就会输出<code>__str__</code>调用的结果。</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;">class</span> Point():</span>
<span id="cb13-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, x, y):</span>
<span id="cb13-3">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> x</span>
<span id="cb13-4">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> y</span>
<span id="cb13-5">    </span>
<span id="cb13-6">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__repr__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb13-7">        <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">"Point(x=</span><span class="sc" style="color: #5E5E5E;">%r</span><span class="st" style="color: #20794D;">, y=</span><span class="sc" style="color: #5E5E5E;">%r</span><span class="st" style="color: #20794D;">)"</span> <span class="op" style="color: #5E5E5E;">%</span> (<span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span>
<span id="cb13-8">    </span>
<span id="cb13-9">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__str__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb13-10">        <span class="cf" style="color: #003B4F;">return</span> <span class="ss" style="color: #20794D;">f'Just a normal 2d point(</span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>x<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, </span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>y<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">)'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">p <span class="op" style="color: #5E5E5E;">=</span> Point(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">p</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>Point(x=3, y=4)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="bu" style="color: null;">repr</span>(p)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>'Point(x=3, y=4)'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="bu" style="color: null;">print</span>(p)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Just a normal 2d point(3, 4)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="bu" style="color: null;">str</span>(p)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>'Just a normal 2d point(3, 4)'</code></pre>
</div>
</div>
</section>
</section>
<section id="类的__setattr__方法" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> 类的<code>__setattr__</code>方法</h1>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">p <span class="op" style="color: #5E5E5E;">=</span> Point(<span class="st" style="color: #20794D;">'3'</span>, <span class="st" style="color: #20794D;">'4'</span>)</span>
<span id="cb23-2">p</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>Point(x='3', y='4')</code></pre>
</div>
</div>
<p>想在初始化Point的时候，把x，y属性转变成float类型，<code>__setattr__</code>方法就能用上了</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;">class</span> Point():</span>
<span id="cb25-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, x, y):</span>
<span id="cb25-3">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> x</span>
<span id="cb25-4">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> y</span>
<span id="cb25-5">    </span>
<span id="cb25-6">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__setattr__</span>(<span class="va" style="color: #111111;">self</span>, name, value):</span>
<span id="cb25-7">        <span class="va" style="color: #111111;">self</span>.__dict__[name] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">float</span>(value)</span>
<span id="cb25-8">    </span>
<span id="cb25-9">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__repr__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb25-10">        <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">"Point(x=</span><span class="sc" style="color: #5E5E5E;">%r</span><span class="st" style="color: #20794D;">, y=</span><span class="sc" style="color: #5E5E5E;">%r</span><span class="st" style="color: #20794D;">)"</span> <span class="op" style="color: #5E5E5E;">%</span> (<span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">p <span class="op" style="color: #5E5E5E;">=</span> Point(<span class="st" style="color: #20794D;">'3'</span>, <span class="st" style="color: #20794D;">'4'</span>)</span>
<span id="cb26-2">p</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>Point(x=3.0, y=4.0)</code></pre>
</div>
</div>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">p.__dict__</span></code></pre></div>
<p>p的x和y属性都已经是float类型了，这是怎么做到的呢？</p>
<p>在类的<code>__init__</code>函数中，<code>self.x =</code>x这一句，<code>self.x</code>的值设为<code>x</code>，</p>
<p>当遇到这种<code>对象.属性 = 值</code>的时候，如果重写了<code>__setattr__</code>方法，就会调用<code>__setattr__</code>方法，</p>
<p>也就是说当遇到<code>对象.属性 = 值</code>，相当于调用了<code>__setattr__(对象, 属性, 值)</code></p>
<p>在这里相当于<code>__setattr__(self, 'x', x)</code>，在<code>__setattr__</code>函数里修改了<code>self.__dict__['x'] = float(value)</code></p>
<p><code>__setattr__</code>函数里面可以做你想做的任何事情，不仅仅是改变默认的属性赋值操作</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="kw" style="color: #003B4F;">class</span> Point():</span>
<span id="cb29-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, x, y):</span>
<span id="cb29-3">        <span class="va" style="color: #111111;">self</span>._modules <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb29-4">        <span class="va" style="color: #111111;">self</span>.x <span class="op" style="color: #5E5E5E;">=</span> x</span>
<span id="cb29-5">        <span class="va" style="color: #111111;">self</span>.y <span class="op" style="color: #5E5E5E;">=</span> y</span>
<span id="cb29-6">    </span>
<span id="cb29-7">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__setattr__</span>(<span class="va" style="color: #111111;">self</span>, name, value):</span>
<span id="cb29-8">        <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> name.startswith(<span class="st" style="color: #20794D;">'_'</span>):</span>
<span id="cb29-9">            <span class="va" style="color: #111111;">self</span>._modules[name] <span class="op" style="color: #5E5E5E;">=</span> value</span>
<span id="cb29-10">            <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'add </span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:</span><span class="sc" style="color: #5E5E5E;">{</span>value<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> to _module'</span>)</span>
<span id="cb29-11">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'set </span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> to </span><span class="sc" style="color: #5E5E5E;">{</span>value<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb29-12">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__setattr__</span>(name, value)</span>
<span id="cb29-13">        </span>
<span id="cb29-14">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__repr__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb29-15">        <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">"Point(x=</span><span class="sc" style="color: #5E5E5E;">%r</span><span class="st" style="color: #20794D;">, y=</span><span class="sc" style="color: #5E5E5E;">%r</span><span class="st" style="color: #20794D;">)"</span> <span class="op" style="color: #5E5E5E;">%</span> (<span class="va" style="color: #111111;">self</span>.x, <span class="va" style="color: #111111;">self</span>.y)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">p <span class="op" style="color: #5E5E5E;">=</span> Point(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>set _modules to {}
add x:3 to _module
set x to 3
add y:4 to _module
set y to 4</code></pre>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">p._modules</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>{'x': 3, 'y': 4}</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>Python</category>
  <guid>https://chenminicode.github.io/posts/2022-11-31-python_magic_method/index.html</guid>
  <pubDate>Fri, 30 Dec 2022 16:00:00 GMT</pubDate>
</item>
<item>
  <title>博客原因</title>
  <dc:creator>metseq</dc:creator>
  <link>https://chenminicode.github.io/posts/2018-07-19-blog_reason/index.html</link>
  <description><![CDATA[ 




<p>最开始建这个博客，纯粹想了解怎样在github上，用Jekll搭建博客。搭好后，发现这里可以记录自己的学习过程。因为我很健忘，今天想到学习什么有趣的东西，明天可能就忘了。</p>
<p>很多人都在说自己是一个终生学习的人，学校也在提倡终生学习。这里有3个问题： 1. 是否真的一直在学习？ 2. 学习什么？ 3. 在“一生”的时间尺度下，学习的规划是否有效？</p>
<p>第一个问题只有盖棺定论时，才能回答。把我的学习过程记录下来，督促自己保持学习的习惯，不找借口中止了学习。</p>
<p>第二个问题，当然是学习自己感兴趣的和有用的东西。现在的教育，导致学生没有兴趣，不知道自己喜欢什么。在高考后，不知道报什么专业，应为根本就不知道自己喜欢什么，想从事什么样的职业，过怎样的生活。而且自己喜欢的东西，未必真的了解。我报的专业，高中以为是喜欢的，了解之后发现是另一回事。也许你会说在没有学习那个专业之前，是不会真正了解的。这是惯用的理由，但是在真正学习之前，可以了解这个专业的一些背景，这些知识足够你做一个合理的选择。</p>
<p>慢慢的，把之前得到的观念重新做了审视，像笛卡尔怀疑一切一样，去怀疑我曾经学到的东西；渐渐我发现自己的兴趣倾向： - 喜欢了解背后的原理、算法，而不仅仅是外表 - 喜欢计算机，应为想到的东西可以马上操作实验</p>
<p>第三个问题，我也不知道，怎样的学习规划适合长尺度下的学习。 Peter Norvig写了一篇文章《Teach Yourself Programmin in Ten Years》（10年自学编程），讲了现在很多人学习急功近利，如24小时自学Java。文中给有志于自学编程的人一些很好的建议。建议只有在真正被采用，而起到好作用时才是建议。章太炎在《今日青年之弱点》一文中，写到“现在青年第一弱点，就是把事情太看容易，其结果不是侥幸，便是退却。”，“现在青年只有将这个弱点痛改，遇事宜慎重，决机宜敏速，抱志既极坚确，观察又极明了，则无所谓侥幸退却，只有百折千回以达吾人最终之目的而已。”。学习不是一件容易的事，能很容易学会的事也不足以成为你自己。我想在这里记录我的学习过程，实验我的学习计划。至于是否有效，等过后看就知道了。</p>



 ]]></description>
  <category>essay</category>
  <guid>https://chenminicode.github.io/posts/2018-07-19-blog_reason/index.html</guid>
  <pubDate>Wed, 18 Jul 2018 16:00:00 GMT</pubDate>
</item>
</channel>
</rss>
